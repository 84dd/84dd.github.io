(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{463:function(s,a,t){"use strict";t.r(a);var e=t(5),_=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[s._v("#")]),s._v(" MySQL")]),s._v(" "),t("p",[s._v("MySQL演变过程一般可以为：单机单库 --\x3e 主从架构 --\x3e 分库分表 --\x3e 云数据库")]),s._v(" "),t("h2",{attrs:{id:"引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引擎"}},[s._v("#")]),s._v(" 引擎")]),s._v(" "),t("p",[s._v("使用show engines命令，就可以查看当前数据库支持的引擎信息。在5.5版本之前默认采用MyISAM存储引擎，从5.5开始采用InnoDB存储引擎。")]),s._v(" "),t("h3",{attrs:{id:"innodb和myisam对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#innodb和myisam对比"}},[s._v("#")]),s._v(" InnoDB和MyISAM对比")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("事务和外键")]),s._v(" "),t("ul",[t("li",[s._v("InnoDB支持事务和外键，具有安全性和完整性，适合大量insert或update操作")]),s._v(" "),t("li",[s._v("MyISAM不支持事务和外键，它提供高速存储和检索，适合大量的select查询操作")])])]),s._v(" "),t("li",[t("strong",[s._v("锁机制")]),s._v(" "),t("ul",[t("li",[s._v("InnoDB支持行级锁，锁定指定记录。基于索引来加锁实现。")]),s._v(" "),t("li",[s._v("MyISAM支持表级锁，锁定整张表。")])])]),s._v(" "),t("li",[t("strong",[s._v("索引结构")]),s._v(" "),t("ul",[t("li",[s._v("InnoDB使用聚集索引(聚簇索引)，索引和记录在一起存储，既缓存索引，也缓存记录。")]),s._v(" "),t("li",[s._v("MyISAM使用非聚集索引(非聚簇索引)，索引和记录分开。")])])]),s._v(" "),t("li",[t("strong",[s._v("并发处理能力")]),s._v(" "),t("ul",[t("li",[s._v("InnoDB读写阻塞可以与隔离级别有关，可以采用多版本并发控制(MVCC)来支持高并发。")]),s._v(" "),t("li",[s._v("MyISAM使用表锁，会导致写操作并发率低，读之间并不阻塞，读写阻塞。")])])]),s._v(" "),t("li",[t("strong",[s._v("存储文件")]),s._v(" "),t("ul",[t("li",[s._v("InnoDB表对应两个文件，一个.frm表结构文件，一个.ibd数据文件。InnoDB表最大支持64TB;")]),s._v(" "),t("li",[s._v("MyISAM表对应三个文件，一个.frm表结构文件，一个MYD表数据文件，一个.MYI索引文件。从 MySQL5.0开始默认限制是256TB。")])])])]),s._v(" "),t("h4",{attrs:{id:"适用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[s._v("#")]),s._v(" 适用场景")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("MyISAM")]),s._v("（不支持事务和外键，访问速度快）\n"),t("ul",[t("li",[s._v("不需要事务支持(不支持)")]),s._v(" "),t("li",[s._v("并发相对较低(锁定机制问题)")]),s._v(" "),t("li",[s._v("数据修改相对较少，以读为主")]),s._v(" "),t("li",[s._v("数据一致性要求不高")])])]),s._v(" "),t("li",[t("strong",[s._v("InnoDB")]),s._v("（支持事务，具有提交，回滚和崩溃恢复能力，事务安全）\n"),t("ul",[t("li",[s._v("需要事务支持(具有较好的事务特性)")]),s._v(" "),t("li",[s._v("行级锁定对高并发有很好的适应能力")]),s._v(" "),t("li",[s._v("数据更新较为频繁的场景")]),s._v(" "),t("li",[s._v("数据一致性要求较高 硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，减少磁盘IO")])])])]),s._v(" "),t("p",[t("strong",[s._v("总结：")]),s._v(" 两种引擎该如何选择")]),s._v(" "),t("ul",[t("li",[s._v("是否需要事务?有，InnoDB")]),s._v(" "),t("li",[s._v("是否存在并发修改?有，InnoDB")]),s._v(" "),t("li",[s._v("是否追求快速查询，且数据修改少?是，MyISAM")]),s._v(" "),t("li",[t("strong",[s._v("在绝大多数情况下，推荐使用InnoDB")])])]),s._v(" "),t("h3",{attrs:{id:"innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#innodb"}},[s._v("#")]),s._v(" InnoDB")]),s._v(" "),t("h4",{attrs:{id:"内存结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存结构"}},[s._v("#")]),s._v(" 内存结构")]),s._v(" "),t("p",[s._v("内存结构主要包括Buffer Pool、Change Buffer、Adaptive Hash Index和Log Buffer四大组件。\n"),t("img",{attrs:{src:"https://qiniu.84dd.xyz/AK5ueK.png",alt:""}}),s._v(" "),t("strong",[s._v("Buffer Pool配置参数")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("show variables like '%innodb_page_size%';")]),s._v(" 查看page页大小")]),s._v(" "),t("li",[t("code",[s._v("show variables like '%innodb_old%';")]),s._v(" 查看lru list中old列表参数")]),s._v(" "),t("li",[t("code",[s._v("show variables like '%innodb_buffer%';")]),s._v(" 查看buffer pool参数")])]),s._v(" "),t("p",[s._v("建议:将innodb_buffer_pool_size设置为总内存大小的60%-80%， innodb_buffer_pool_instances可以设置为多个，这样可以避免缓存争夺。")]),s._v(" "),t("p",[t("strong",[s._v("Change Buffer")]),t("br"),s._v("\nChangeBuffer占用BufferPool空间，默认占25%，最大允许占50%，可以根据读写业务量来 进行调整。参数innodb_change_buffer_max_size;")]),s._v(" "),t("p",[t("strong",[s._v("Log Buffer")]),t("br"),s._v("\nLogBuffer主要是用于记录InnoDB引擎日志，在DML操作时会产生Redo和Undo日志。 LogBuffer空间满了，会自动写入磁盘。可以通过将innodb_log_buffer_size参数调大，减少磁盘IO频率。\ninnodb_flush_log_at_trx_commit参数控制日志刷新行为，默认为1。一般将该参数调整到2")]),s._v(" "),t("ul",[t("li",[s._v("0: 每隔1秒写日志文件和刷盘操作(写日志文件LogBuffer--\x3eOS cache，刷盘OS cache--\x3e磁盘文件)，最多丢失1秒数据")]),s._v(" "),t("li",[s._v("1: 事务提交，立刻写日志文件和刷盘，数据不丢失，但是会频繁IO操作")]),s._v(" "),t("li",[s._v("2: 事务提交，立刻写日志文件，每隔1秒钟进行刷盘操作")])]),s._v(" "),t("h2",{attrs:{id:"日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[s._v("#")]),s._v(" 日志")]),s._v(" "),t("p",[s._v("日志文件分为以下几种")]),s._v(" "),t("ul",[t("li",[s._v("错误日志（Error log）"),t("br"),s._v("\n默认开启，"),t("code",[s._v("show variables like '%log_error%;；")])]),s._v(" "),t("li",[s._v("通用查询日志（General query log）"),t("br"),s._v("\n记录一般查询语句，"),t("code",[s._v("show variables like '%general%';")])]),s._v(" "),t("li",[s._v("二进制日志（binary log）"),t("br"),s._v("\n记录了对MySQL数据库执行的更改操作，并且记录了语句的发生时间、执行时长;但是它不 记录select、show等不修改数据库的SQL。主要用于数据库恢复和主从复制。"),t("br"),s._v("\n是否开启："),t("code",[s._v("show variables like '%log_bin%';")]),t("br"),s._v("\n参数查看："),t("code",[s._v("show variables like '%binlog%';")]),t("br"),s._v("\n查看日志文件："),t("code",[s._v("show binary logs;")])]),s._v(" "),t("li",[s._v("慢查询日志(Slow query log)"),t("br"),s._v("\n记录所有执行时间超时的查询SQL，默认是10秒。"),t("br"),s._v("\n是否开启："),t("code",[s._v("show variables like '%slow_query%';")]),t("br"),s._v("\n开启："),t("code",[s._v("set global slow_query_log = 1;")]),t("br"),s._v("\n查看时长："),t("code",[s._v("show variables like '%long_query_time%';")]),t("br"),s._v("\n修改时长："),t("code",[s._v("set long_query_time=5;")])])]),s._v(" "),t("h3",{attrs:{id:"undo-log-innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#undo-log-innodb"}},[s._v("#")]),s._v(" Undo Log（InnoDB）")]),s._v(" "),t("p",[s._v("数据库事务开始之前，会将要修改的记录存放到 Undo 日志里，当事务回滚时或者数据库崩溃时，可以利用 Undo 日志，撤销未提交事务对数据库产生的影响。")]),s._v(" "),t("h3",{attrs:{id:"redo-log-innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redo-log-innodb"}},[s._v("#")]),s._v(" Redo Log（InnoDB）")]),s._v(" "),t("p",[s._v("指事务中修改的任何数据，将最新的数据备份存储的位置(Redo Log)，被称为重做日志。")]),s._v(" "),t("h3",{attrs:{id:"binlog-mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binlog-mysql"}},[s._v("#")]),s._v(" Binlog（MySQL）")]),s._v(" "),t("p",[s._v("开启Binlog日志有以下两个最重要的使用场景。")]),s._v(" "),t("ul",[t("li",[s._v("主从复制：在主库中开启Binlog功能，这样主库就可以把Binlog传递给从库，从库拿到 Binlog后实现数据恢复达到主从数据一致性。")]),s._v(" "),t("li",[s._v("数据恢复：通过mysqlbinlog工具来恢复数据。")])]),s._v(" "),t("p",[s._v("Binlog文件记录模式有STATEMENT、ROW和MIXED三种")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ROW")]),s._v("(row-based replication, RBR):日志中会记录每一行数据被修改的情况，然后在 slave端对相同的数据进行修改。\n"),t("ul",[t("li",[s._v("优点:能清楚记录每一个行数据的修改细节，能完全实现主从数据同步和数据的恢复。")]),s._v(" "),t("li",[s._v("缺点:批量操作，会产生大量的日志，尤其是alter table会让日志暴涨。")])])]),s._v(" "),t("li",[t("code",[s._v("STATMENT")]),s._v("(statement-based replication, SBR):每一条被修改数据的SQL都会记录到 master的Binlog中，slave在复制的时候SQL进程会解析成和原来master端执行过的相同的 SQL再次执行。简称SQL语句复制。\n"),t("ul",[t("li",[s._v("优点:日志量小，减少磁盘IO，提升存储和恢复速度")]),s._v(" "),t("li",[s._v("缺点:在某些情况下会导致主从数据不一致，比如last_insert_id()、now()等函数。")])])]),s._v(" "),t("li",[t("code",[s._v("MIXED")]),s._v("(mixed-based replication, MBR):以上两种模式的混合使用，一般会使用 STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存 binlog，MySQL会根据执行的SQL语句选择写入模式。")])]),s._v(" "),t("p",[t("strong",[s._v("Binlog文件操作")])]),s._v(" "),t("ul",[t("li",[s._v("Binlog状态查看"),t("code",[s._v("show variables like 'log_bin';")])]),s._v(" "),t("li",[s._v("开启Binlog功能，需要修改my.cnf或my.ini配置文件，在[mysqld]下面增加log_bin=mysql_bin_log，重启 MySQL服务。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#log-bin=ON\n#log-bin-basename=mysqlbinlog\nbinlog-format=ROW\nlog-bin=mysqlbinlog # 指定binlog的名字\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("使用show binlog events命令")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("show binary logs; //等价于show master logs; \nshow master status;\nshow binlog events;\nshow binlog events in 'mysqlbinlog.000001';\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("使用mysqlbinlog 命令（在mysql安装目录bin下使用）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('mysqlbinlog "文件名"\nmysqlbinlog "文件名" > "test.sql"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("使用 binlog 恢复数据（在mysql安装目录bin下使用）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('//按指定时间恢复\nmysqlbinlog --start-datetime="2020-04-25 18:00:00" --stop- datetime="2020-04-26 00:00:00" mysqlbinlog.000002 | mysql -uroot -p1234\n//按事件位置号恢复\nmysqlbinlog --start-position=154 --stop-position=957 mysqlbinlog.000002 | mysql -uroot -p1234\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("mysqldump:定期全部备份数据库数据。mysqlbinlog可以做增量备份和恢复操作。")]),s._v(" "),t("ul",[t("li",[s._v("删除Binlog文件")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("purge binary logs to 'mysqlbinlog.000001'; //删除指定文件\npurge binary logs before '2020-04-28 00:00:00'; //删除指定时间之前的文件\nreset master; //清除所有文件\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("可以通过设置expire_logs_days参数来启动自动清理功能。默认值为0表示没启用。设置为1表示超 出1天binlog文件会自动删除掉。")]),s._v(" "),t("p",[t("strong",[s._v("Redo Log和Binlog区别")])]),s._v(" "),t("ul",[t("li",[s._v("Redo Log是属于InnoDB引擎功能，Binlog是属于MySQL自带功能，并且是以二进制文件记录。")]),s._v(" "),t("li",[s._v("Redo Log属于物理日志，记录该数据页更新状态内容，Binlog是逻辑日志，记录更新过程。 Redo Log日志是循环写，日志空间大小是固定，Binlog是追加写入，写完一个写下一个，不 会覆盖使用。")]),s._v(" "),t("li",[s._v("Redo Log作为服务器异常宕机后事务数据自动恢复使用，Binlog可以作为主从复制和数据恢 复使用。Binlog没有自动crash-safe能力。")])]),s._v(" "),t("h2",{attrs:{id:"索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[s._v("#")]),s._v(" 索引")]),s._v(" "),t("p",[s._v("按照不同划分方式可以分为以下几种")]),s._v(" "),t("ul",[t("li",[s._v("从索引存储结构划分:B Tree索引、Hash索引、FULLTEXT全文索引、R Tree索引")]),s._v(" "),t("li",[s._v("从应用层次划分:普通索引、唯一索引、主键索引、复合索引")]),s._v(" "),t("li",[s._v("从索引键值类型划分:主键索引、辅助索引(二级索引)")]),s._v(" "),t("li",[s._v("从数据存储和索引键值逻辑关系划分:聚集索引(聚簇索引)、非聚集索引(非聚簇索引)")])]),s._v(" "),t("h3",{attrs:{id:"b-tree结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-tree结构"}},[s._v("#")]),s._v(" B+Tree结构")]),s._v(" "),t("p",[s._v("MySQL数据库索引采用的是B+Tree结构，在B-Tree结构上做了优化改造。")]),s._v(" "),t("h4",{attrs:{id:"b-tree结构-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-tree结构-2"}},[s._v("#")]),s._v(" B-Tree结构")]),s._v(" "),t("ul",[t("li",[s._v("索引值和data数据分布在整棵树结构中")]),s._v(" "),t("li",[s._v("每个节点可以存放多个索引值及对应的data数据")]),s._v(" "),t("li",[s._v("树节点中的多个索引值从左到右升序排列\n"),t("img",{attrs:{src:"https://qiniu.84dd.xyz/QGzLdg.png",alt:""}}),s._v("\nB树的搜索:从根节点开始，对节点内的索引值序列采用二分法查找，如果命中就结束查找。没有 命中会进入子节点重复查找过程，直到所对应的的节点指针为空，或已经是叶子节点了才结束。")])]),s._v(" "),t("h4",{attrs:{id:"b-tree结构-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-tree结构-3"}},[s._v("#")]),s._v(" B+Tree结构")]),s._v(" "),t("ul",[t("li",[s._v("非叶子节点不存储data数据，只存储索引值，这样便于存储更多的索引值")]),s._v(" "),t("li",[s._v("叶子节点包含了所有的索引值和data数据")]),s._v(" "),t("li",[s._v("叶子节点用指针连接，提高区间的访问性能\n"),t("img",{attrs:{src:"https://qiniu.84dd.xyz/GyMs9n.png",alt:""}}),s._v("\n相比B树，B+树进行范围查找时，只需要查找定位两个节点的索引值，然后利用叶子节点的指针进 行遍历即可。而B树需要遍历范围内所有的节点和数据，显然B+Tree效率高。")])]),s._v(" "),t("h3",{attrs:{id:"explain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#explain"}},[s._v("#")]),s._v(" EXPLAIN")]),s._v(" "),t("p",[s._v("MySQL 提供了一个 EXPLAIN 命令，它可以对 SELECT 语句进行分析，并输出 SELECT 执行的详细信 息，供开发人员有针对性的优化。\n"),t("img",{attrs:{src:"https://qiniu.84dd.xyz/2s6rtg.png",alt:""}})]),s._v(" "),t("Tabs",{attrs:{type:"border-card"}},[t("Tab",{attrs:{label:"select_type"}},[t("p",[s._v("表示查询的类型，常用的值如下:")]),s._v(" "),t("ul",[t("li",[s._v("SIMPLE : 表示查询语句不包含子查询或union")]),s._v(" "),t("li",[s._v("PRIMARY:表示此查询是最外层的查询")]),s._v(" "),t("li",[s._v("UNION:表示此查询是UNION的第二个或后续的查询")]),s._v(" "),t("li",[s._v("DEPENDENT UNION:UNION中的第二个或后续的查询语句，使用了外面查询结果")]),s._v(" "),t("li",[s._v("UNION RESULT:UNION的结果")]),s._v(" "),t("li",[s._v("SUBQUERY:SELECT子查询语句")]),s._v(" "),t("li",[s._v("DEPENDENT SUBQUERY:SELECT子查询语句依赖外层查询的结果。")])]),s._v(" "),t("p",[s._v("最常见的查询类型是SIMPLE，表示我们的查询没有子查询也没用到UNION查询。")])]),s._v(" "),t("Tab",{attrs:{label:"type"}},[t("p",[s._v("表示存储引擎查询数据时采用的方式。比较重要的一个属性，通过它可以判断出查询是全表扫描还是基于索引的部分扫描。常用属性值如下，从上至下效率依次增强。")]),s._v(" "),t("ul",[t("li",[s._v("ALL:表示全表扫描，性能最差。")]),s._v(" "),t("li",[s._v("index:表示基于索引的全表扫描，先扫描索引再扫描全表数据。")]),s._v(" "),t("li",[s._v("range:表示使用索引范围查询。使用>、>=、<、<=、in等等。")]),s._v(" "),t("li",[s._v("ref:表示使用非唯一索引进行单值查询。")]),s._v(" "),t("li",[s._v("eq_ref:一般情况下出现在多表join查询，表示前面表的每一个记录，都只能匹配后面表的一行结果。")]),s._v(" "),t("li",[s._v("const:表示使用主键或唯一索引做等值查询，常量查询。")]),s._v(" "),t("li",[s._v("NULL:表示不用访问表，速度最快。")])])]),s._v(" "),t("Tab",{attrs:{label:"possible_keys"}},[t("p",[s._v("表示查询时能够使用到的索引。注意并不一定会真正使用，显示的是索引名称。")])]),s._v(" "),t("Tab",{attrs:{label:"key"}},[t("p",[s._v("表示查询时真正使用到的索引，显示的是索引名称。")])]),s._v(" "),t("Tab",{attrs:{label:"rows"}},[t("p",[s._v("MySQL查询优化器会根据统计信息，估算SQL要查询到结果需要扫描多少行记录。原则上rows是越少效率越高，可以直观的了解到SQL效率高低。")])]),s._v(" "),t("Tab",{attrs:{label:"key_len"}},[t("p",[s._v("表示查询使用了索引的字节数量。可以判断是否全部使用了组合索引。key_len的计算规则如下:")]),s._v(" "),t("ul",[t("li",[s._v("字符串类型"),t("br"),s._v("\n字符串长度跟字符集有关:latin1=1、gbk=2、utf8=3、utf8mb4=4"),t("br"),s._v("\nchar(n):n*字符集长度"),t("br"),s._v("\nvarchar(n):n * 字符集长度 + 2字节")]),s._v(" "),t("li",[s._v("数值类型"),t("br"),s._v("\nTINYINT:1个字节"),t("br"),s._v("\nSMALLINT:2个字节"),t("br"),s._v("\nMEDIUMINT:3个字节"),t("br"),s._v("\nINT、FLOAT:4个字节"),t("br"),s._v("\nBIGINT、DOUBLE:8个字节")]),s._v(" "),t("li",[s._v("时间类型"),t("br"),s._v("\nDATE:3个字节"),t("br"),s._v("\nTIMESTAMP:4个字节"),t("br"),s._v("\nDATETIME:8个字节")]),s._v(" "),t("li",[s._v("字段属性"),t("br"),s._v("\nNULL属性占用1个字节，如果一个字段设置了NOT NULL，则没有此项。")])])]),s._v(" "),t("Tab",{attrs:{label:"Extra"}},[t("p",[s._v("Extra表示很多额外的信息，各种操作会在Extra提示相关信息，常见几种如下:")]),s._v(" "),t("ul",[t("li",[s._v("Using where"),t("br"),s._v("\n表示查询需要通过索引回表查询数据。")]),s._v(" "),t("li",[s._v("Using index"),t("br"),s._v("\n表示查询需要通过索引，索引就可以满足所需数据。")]),s._v(" "),t("li",[s._v("Using filesort"),t("br"),s._v("\n表示查询出来的结果需要额外排序，数据量小在内存，大的话在磁盘，因此有Using filesort 建议优化。")]),s._v(" "),t("li",[s._v("Using temprorary"),t("br"),s._v("\n查询使用到了临时表，一般出现于去重、分组等操作。")])])])],1),s._v(" "),t("h3",{attrs:{id:"回表查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回表查询"}},[s._v("#")]),s._v(" 回表查询")]),s._v(" "),t("p",[s._v("在之前介绍过，InnoDB索引有聚簇索引和辅助索引。聚簇索引的叶子节点存储行记录，InnoDB必须要 有，且只有一个。辅助索引的叶子节点存储的是主键值和索引字段值，通过辅助索引无法直接定位行记 录，通常情况下，需要扫码两遍索引树。先通过辅助索引定位主键值，然后再通过聚簇索引定位行记 录，这就叫做回表查询，它的性能比扫一遍索引树低。")]),s._v(" "),t("p",[s._v("总结:通过索引查询主键值，然后再去聚簇索引查询记录信息")]),s._v(" "),t("h3",{attrs:{id:"覆盖索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引"}},[s._v("#")]),s._v(" 覆盖索引")]),s._v(" "),t("p",[s._v("只需要在一棵索引树上就能获取SQL所需的所 有列数据，无需回表，速度更快，这就叫做索引覆盖。")]),s._v(" "),t("p",[s._v("实现索引覆盖最常见的方法就是:将被查询的字段，建立到组合索引。")]),s._v(" "),t("h3",{attrs:{id:"最左前缀原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀原则"}},[s._v("#")]),s._v(" 最左前缀原则")]),s._v(" "),t("p",[s._v("复合索引使用时遵循最左前缀原则，最左前缀顾名思义，就是最左优先，即查询中使用到最左边的列，那么查询就会使用到索引，如果从索引的第二列开始查找，索引将失效。\n"),t("img",{attrs:{src:"https://qiniu.84dd.xyz/8U0SZX.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"like查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#like查询"}},[s._v("#")]),s._v(" LIKE查询")]),s._v(" "),t("p",[s._v("MySQL在使用Like模糊查询时，索引是可以被使用的，只有把%字符写在后面才会使用到索引。")]),s._v(" "),t("h3",{attrs:{id:"null查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#null查询"}},[s._v("#")]),s._v(" NULL查询")]),s._v(" "),t("p",[s._v("虽然MySQL可以在含有NULL的列上使用索引，但NULL和其他数据还是有区别的，不建议列上允许为 NULL。最好设置NOT NULL，并给一个默认值。")]),s._v(" "),t("h3",{attrs:{id:"索引与排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引与排序"}},[s._v("#")]),s._v(" 索引与排序")]),s._v(" "),t("p",[s._v("MySQL查询支持filesort和index两种方式的排序，filesort是先把结果查出，然后在缓存或磁盘进行排序操作，效率较低。使用index是指利用索引自动实现排序，不需另做排序操作，效率会比较高。")]),s._v(" "),t("p",[s._v("filesort有两种排序算法:双路排序和单路排序。")]),s._v(" "),t("ul",[t("li",[s._v("双路排序:需要两次磁盘扫描读取，最终得到用户数据。第一次将排序字段读取出来，然后排序;第二次去读取其他字段数据。")]),s._v(" "),t("li",[s._v("单路排序:从磁盘查询所需的所有列数据，然后在内存排序将结果返回。如果查询数据超出缓存 sort_buffer，会导致多次磁盘读取操作，并创建临时表，最后产生了多次IO，反而会增加负担。解决方 案:少使用select *;增加sort_buffer_size容量和max_length_for_sort_data容量。")])]),s._v(" "),t("p",[s._v("如果我们Explain分析SQL，结果中Extra属性显示Using filesort，表示使用了filesort排序方式，需要优 化。如果Extra属性显示Using index时，表示覆盖索引，也表示所有操作在索引上完成，也可以使用 index排序方式，建议大家尽可能采用覆盖索引。")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("以下几种情况，会使用index方式的排序。")]),s._v(" "),t("ul",[t("li",[s._v("ORDER BY 子句索引列组合满足索引最左前列")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对应(id)、(id,name)索引有效")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("WHERE子句+ORDER BY子句索引列组合满足索引最左前列")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对应 (age,name)索引")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[s._v("WARNING")]),s._v(" "),t("p",[s._v("以下几种情况，会使用filesort方式的排序。")]),s._v(" "),t("ul",[t("li",[s._v("对索引列同时使用了ASC和DESC")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("asc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对应 (age,name)索引")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("WHERE子句和ORDER BY子句满足最左前缀，但where子句使用了范围查询(例如>、<、in 等)")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对应 (age,name)索引")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("ORDER BY或者WHERE+ORDER BY索引列没有满足索引最左前列")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对应(age,name)索引")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("使用了不同的索引，MySQL每次只采用一个索引，ORDER BY涉及了两个索引")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对应(name)、(age)两个索引")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("WHERE子句与ORDER BY子句，使用了不同的索引")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'tom'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对应 (name)、(age)索引")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("WHERE子句或者ORDER BY子句中索引列使用了表达式，包括函数表达式")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" abs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对应(age)索引")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("h2",{attrs:{id:"事务和锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务和锁"}},[s._v("#")]),s._v(" 事务和锁")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("事务隔离级别"),t("img",{attrs:{width:"115/"}})]),s._v(" "),t("th",[s._v("回滚覆盖")]),s._v(" "),t("th",[s._v("脏读")]),s._v(" "),t("th",[s._v("不可重复读")]),s._v(" "),t("th",[s._v("提交覆盖")]),s._v(" "),t("th",[s._v("幻读")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("读未提交/Read Uncommitted")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("可能")]),s._v(" "),t("td",[s._v("可能")]),s._v(" "),t("td",[s._v("可能")]),s._v(" "),t("td",[s._v("可能")])]),s._v(" "),t("tr",[t("td",[s._v("读已提交/Read Committed")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("可能")]),s._v(" "),t("td",[s._v("可能")]),s._v(" "),t("td",[s._v("可能")])]),s._v(" "),t("tr",[t("td",[s._v("可重复读/Repeatable Read")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("可能")])]),s._v(" "),t("tr",[t("td",[s._v("串行化/Serializable")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("x")]),s._v(" "),t("td",[s._v("x")])])])]),s._v(" "),t("ul",[t("li",[s._v("MySQL默认隔离级别:可重复读")]),s._v(" "),t("li",[s._v("Oracle、SQLServer默认隔离级别:读已提交")])]),s._v(" "),t("p",[s._v("数据库的事务隔离级别越高，并发问题就越小，但是并发处理能力越差(代价)。读未提交隔离级别最 低，并发问题多，但是并发处理能力好。以后使用时，可以根据系统特点来选择一个合适的隔离级别， 比如对不可重复读和幻读并不敏感，更多关心数据库并发处理能力，此时可以使用Read Commited隔 离级别。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看MySQL当前数据库的事务隔离级别")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'tx_isolation'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" @"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@tx_isolation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置事务隔离级别")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" tx_isolation"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'READ-UNCOMMITTED'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" tx_isolation"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'READ-COMMITTED'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" tx_isolation"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'REPEATABLE-READ'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" tx_isolation"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SERIALIZABLE'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h3",{attrs:{id:"行锁原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行锁原理"}},[s._v("#")]),s._v(" 行锁原理")]),s._v(" "),t("p",[s._v("在InnoDB引擎中，我们可以使用行锁和表锁，其中行锁又分为共享锁和排他锁。InnoDB行锁是通过对 索引数据页上的记录加锁实现的，主要实现算法有 3 种")]),s._v(" "),t("ul",[t("li",[s._v("RecordLock锁:锁定单个行记录的锁。(记录锁，RC、RR隔离级别都支持)")]),s._v(" "),t("li",[s._v("GapLock锁:间隙锁，锁定索引记录间隙，确保索引记录的间隙不变。(范围锁，RR隔离级别支 持)")]),s._v(" "),t("li",[s._v("Next-key Lock 锁:记录锁和间隙锁组合，同时锁住数据，并且锁住数据前后范围。(记录锁+范 围锁，RR隔离级别支持)")])]),s._v(" "),t("p",[s._v("在RR隔离级别，InnoDB对于记录加锁行为都是先采用Next-Key Lock，但是当SQL操作含有唯一索引 时，Innodb会对Next-Key Lock进行优化，降级为RecordLock，仅锁住索引本身而非范围。")]),s._v(" "),t("ul",[t("li",[s._v("1)"),t("code",[s._v("select ... from")]),s._v(" 语句:InnoDB引擎采用MVCC机制实现非阻塞读，所以对于普通的select语句， InnoDB不加锁")]),s._v(" "),t("li",[s._v("2)"),t("code",[s._v("select ... from lock in share mode")]),s._v("语句:追加了共享锁，InnoDB会使用Next-Key Lock锁进行处 理，如果扫描发现唯一索引，可以降级为RecordLock锁。")]),s._v(" "),t("li",[s._v("3)"),t("code",[s._v("select ... from for update")]),s._v("语句:追加了排他锁，InnoDB会使用Next-Key Lock锁进行处理，如果扫 描发现唯一索引，可以降级为RecordLock锁。")]),s._v(" "),t("li",[s._v("4)"),t("code",[s._v("update ... where")]),s._v(" 语句:InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以 降级为RecordLock锁。")]),s._v(" "),t("li",[s._v("5)"),t("code",[s._v("delete ... where")]),s._v(" 语句:InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以降 级为RecordLock锁。")]),s._v(" "),t("li",[s._v("6)"),t("code",[s._v("insert")]),s._v("语句:InnoDB会在将要插入的那一行设置一个排他的RecordLock锁。")])]),s._v(" "),t("p",[s._v("死锁比较常规的解决方案为：")]),s._v(" "),t("ul",[t("li",[s._v("1）在同一个事务中，尽可能做到一次锁定所需要的所有资源")]),s._v(" "),t("li",[s._v("2）按照id对资源排序，然后按顺序进行处理")])]),s._v(" "),t("h3",{attrs:{id:"死锁排查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#死锁排查"}},[s._v("#")]),s._v(" 死锁排查")]),s._v(" "),t("ul",[t("li",[s._v("查看死锁日志"),t("br"),s._v("\n通过show engine innodb status\\G命令查看近期死锁日志信息。"),t("br"),s._v("\n使用方法:1、查看近期死锁日志信息;2、使用explain查看下SQL执行计划")]),s._v(" "),t("li",[s._v("查看锁状态变量"),t("br"),s._v("\n通过show status like'innodb_row_lock%‘命令检查状态变量，分析系统中的行锁的争夺 情况\n"),t("ul",[t("li",[s._v("Innodb_row_lock_current_waits:当前正在等待锁的数量")]),s._v(" "),t("li",[s._v("Innodb_row_lock_time:从系统启动到现在锁定总时间长度")]),s._v(" "),t("li",[s._v("Innodb_row_lock_time_avg: 每次等待锁的平均时间")]),s._v(" "),t("li",[s._v("Innodb_row_lock_time_max:从系统启动到现在等待最长的一次锁的时间")]),s._v(" "),t("li",[s._v("Innodb_row_lock_waits:系统启动后到现在总共等待的次数"),t("br"),s._v("\n如果等待次数高，而且每次等待时间长，需要分析系统中为什么会有如此多的等待，然后着手定制优化。")])])])]),s._v(" "),t("h2",{attrs:{id:"集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[s._v("#")]),s._v(" 集群")]),s._v(" "),t("h3",{attrs:{id:"主从同步延迟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主从同步延迟"}},[s._v("#")]),s._v(" 主从同步延迟")]),s._v(" "),t("p",[s._v("使用读写分离架构时，数据库主从同步具有延迟性，数据一致性会有影响，对于一些实时性要求比较高的操作，可以采用以下解决方案。")]),s._v(" "),t("ul",[t("li",[s._v("写后立刻读"),t("br"),s._v("\n在写入数据库后，某个时间段内读操作就去主库，之后读操作访问从库。")]),s._v(" "),t("li",[s._v("二次查询"),t("br"),s._v("\n先去从库读取数据，找不到时就去主库进行数据读取。该操作容易将读压力返还给主库，为了避免 恶意攻击，建议对数据库访问API操作进行封装，有利于安全和低耦合。")]),s._v(" "),t("li",[s._v("根据业务特殊处理"),t("br"),s._v("\n根据业务特点和重要程度进行调整，比如重要的，实时性要求高的业务数据读写可以放在主库。对于次要的业务，实时性要求不高可以进行读写分离，查询时去从库查询。")])]),s._v(" "),t("h3",{attrs:{id:"读写分离落地"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读写分离落地"}},[s._v("#")]),s._v(" 读写分离落地")]),s._v(" "),t("ul",[t("li",[s._v("方案一：基于编程和配置实现(应用端)")]),s._v(" "),t("li",[s._v("方案二：基于服务器端代理实现(服务器端)"),t("br"),s._v("\n代理中间件常用的有MySQL Proxy、MyCat以及Shardingsphere等等")])]),s._v(" "),t("h3",{attrs:{id:"mha架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mha架构"}},[s._v("#")]),s._v(" MHA架构")]),s._v(" "),t("p",[s._v("MHA的搭建可参考"),t("RouterLink",{attrs:{to:"/docs/java/41mha.html"}},[s._v("MHA高可用")])],1),s._v(" "),t("p",[s._v("MHA(Master High Availability)是一套比较成熟的 MySQL 高可用方案，也是一款优秀的故障切换和 主从提升的高可用软件。在MySQL故障切换过程中，MHA能做到在30秒之内自动完成数据库的故障切 换操作，并且在进行故障切换的过程中，MHA能在最大程度上保证数据的一致性，以达到真正意义上的 高可用。MHA还支持在线快速将Master切换到其他主机，通常只需0.5-2秒。")]),s._v(" "),t("p",[s._v("MHA由两部分组成:MHA Manager(管理节点)和MHA Node(数据节点)。")]),s._v(" "),t("ul",[t("li",[s._v("MHA Manager可以单独部署在一台独立的机器上管理多个master-slave集群，也可以部署在一台 slave节点上。负责检测master是否宕机、控制故障转移、检查MySQL复制状况等。")]),s._v(" "),t("li",[s._v("MHA Node运行在每台MySQL服务器上，不管是Master角色，还是Slave角色，都称为Node，是 被监控管理的对象节点，负责保存和复制master的二进制日志、识别差异的中继日志事件并将其 差异的事件应用于其他的slave、清除中继日志。")])]),s._v(" "),t("p",[s._v("MHA Manager会定时探测集群中的master节点，当master出现故障时，它可以自动将最新数据的 slave提升为新的master，然后将所有其他的slave重新指向新的master，整个故障转移过程对应用程序 完全透明。")]),s._v(" "),t("p",[t("strong",[s._v("MHA故障处理机制:")])]),s._v(" "),t("ul",[t("li",[s._v("把宕机master的binlog保存下来")]),s._v(" "),t("li",[s._v("根据binlog位置点找到最新的slave")]),s._v(" "),t("li",[s._v("用最新slave的relay log修复其它slave")]),s._v(" "),t("li",[s._v("将保存下来的binlog在最新的slave上恢复")]),s._v(" "),t("li",[s._v("将最新的slave提升为master")]),s._v(" "),t("li",[s._v("将其它slave重新指向新提升的master，并开启主从复制")])]),s._v(" "),t("p",[t("strong",[s._v("MHA优点:")])]),s._v(" "),t("ul",[t("li",[s._v("自动故障转移快")]),s._v(" "),t("li",[s._v("主库崩溃不存在数据一致性问题")]),s._v(" "),t("li",[s._v("性能优秀，支持半同步复制和异步复制")]),s._v(" "),t("li",[s._v("一个Manager监控节点可以监控多个集群")])]),s._v(" "),t("h3",{attrs:{id:"分库分表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分库分表"}},[s._v("#")]),s._v(" 分库分表")]),s._v(" "),t("p",[s._v("分库分表方案:只分库、只分表、分库又分表。")]),s._v(" "),t("ul",[t("li",[s._v("垂直拆分:由于表数量多导致的单个库大。将表拆分到多个库中。解决表过多或者是表字段过多问题。")]),s._v(" "),t("li",[s._v("水平拆分:由于表记录多导致的单个库大。将表记录拆分到多个表中。解决表中记录过多问题。")])]),s._v(" "),t("p",[t("strong",[s._v("垂直拆分优点:")])]),s._v(" "),t("ul",[t("li",[s._v("拆分后业务清晰，拆分规则明确;")]),s._v(" "),t("li",[s._v("易于数据的维护和扩展;")]),s._v(" "),t("li",[s._v("可以使得行数据变小，一个数据块 (Block) 就能存放更多的数据，在查询时就会减少 I/O 次 数;")]),s._v(" "),t("li",[s._v("可以达到最大化利用 Cache 的目的，具体在垂直拆分的时候可以将不常变的字段放一起，将 经常改变的放一起;")]),s._v(" "),t("li",[s._v("便于实现冷热分离的数据表设计模式。")])]),s._v(" "),t("p",[t("strong",[s._v("垂直拆分缺点:")])]),s._v(" "),t("ul",[t("li",[s._v("主键出现冗余，需要管理冗余列;")]),s._v(" "),t("li",[s._v("会引起表连接 JOIN 操作，可以通过在业务服务器上进行 join 来减少数据库压力，提高了系 统的复杂度;")]),s._v(" "),t("li",[s._v("依然存在单表数据量过大的问题;")]),s._v(" "),t("li",[s._v("事务处理复杂。")])]),s._v(" "),t("p",[t("strong",[s._v("水平拆分优点:")])]),s._v(" "),t("ul",[t("li",[s._v("拆分规则设计好，join 操作基本可以数据库做;")]),s._v(" "),t("li",[s._v("不存在单库大数据，高并发的性能瓶颈;")]),s._v(" "),t("li",[s._v("切分的表的结构相同，应用层改造较少，只需要增加路由规则即可;")]),s._v(" "),t("li",[s._v("提高了系统的稳定性和负载能力。")])]),s._v(" "),t("p",[t("strong",[s._v("水平拆分缺点:")])]),s._v(" "),t("ul",[t("li",[s._v("拆分规则难以抽象;")]),s._v(" "),t("li",[s._v("跨库Join性能较差;")]),s._v(" "),t("li",[s._v("分片事务的一致性难以解决;")]),s._v(" "),t("li",[s._v("数据扩容的难度和维护量极大。")])]),s._v(" "),t("h3",{attrs:{id:"主键策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主键策略"}},[s._v("#")]),s._v(" 主键策略")]),s._v(" "),t("ul",[t("li",[s._v("UUID")]),s._v(" "),t("li",[s._v("COMB(UUID变种)")]),s._v(" "),t("li",[s._v("SNOWFLAKE雪花算法（推荐）")]),s._v(" "),t("li",[s._v("数据库ID表")]),s._v(" "),t("li",[s._v("Redis生成ID")])]),s._v(" "),t("h3",{attrs:{id:"分片策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分片策略"}},[s._v("#")]),s._v(" 分片策略")]),s._v(" "),t("ul",[t("li",[s._v("基于范围分片"),t("br"),s._v("\n根据特定字段的范围进行拆分，比如用户ID、订单时间、产品价格等。例如:"),t("br"),s._v("\n{[1 - 100] => Cluster A, [101 - 199] => Cluster B}"),t("br"),s._v("\n优点:新的数据可以落在新的存储节点上，如果集群扩容，数据无需迁移。"),t("br"),s._v("\n缺点:数据热点分布不均，数据冷热不均匀，导致节点负荷不均。")]),s._v(" "),t("li",[s._v("哈希取模分片"),t("br"),s._v("\n整型的Key可直接对设备数量取模，其他类型的字段可以先计算Key的哈希值，然后再对设备数量 取模。假设有n台设备，编号为0 ~ n-1，通过Hash(Key) % n就可以确定数据所在的设备编号。该 模式也称为离散分片。"),t("br"),s._v("\n优点:实现简单，数据分配比较均匀，不容易出现冷热不均，负荷不均的情况。"),t("br"),s._v("\n缺点:扩容时会产生大量的数据迁移，比如从n台设备扩容到n+1，绝大部分数据需要重新分配和 迁移。")]),s._v(" "),t("li",[s._v("一致性哈希分片（推荐）"),t("br"),s._v("\n一致性Hash在增加或者删除节点的时候，受到影响的数据是比较有限的，只会影响到Hash环相邻的节 点，不会发生大规模的数据迁移。")])]),s._v(" "),t("h2",{attrs:{id:"查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询优化"}},[s._v("#")]),s._v(" 查询优化")]),s._v(" "),t("h3",{attrs:{id:"慢查询定位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#慢查询定位"}},[s._v("#")]),s._v(" 慢查询定位")]),s._v(" "),t("p",[s._v("开启慢查询日志")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 MySQL 数据库是否开启了慢查询日志和慢查询日志文件的存储位置的命令如下")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" VARIABLES "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'slow_query_log%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过如下命令开启慢查询日志")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" slow_query_log "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" slow_query_log_file "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'OAK-slow.log'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 表示会记录没有使用索引的查询SQL。前提是slow_query_log 的值为ON，否则不会奏效")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" log_queries_not_using_indexes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定慢查询的阀值，单位秒。如果SQL执行时间超过阀值，就属于慢查询记录到日志文件中")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" long_query_time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h3",{attrs:{id:"查看慢查询日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看慢查询日志"}},[s._v("#")]),s._v(" 查看慢查询日志")]),s._v(" "),t("p",[s._v("1）文本方式查看：直接使用文本编辑器打开slow.log日志即可。\n"),t("img",{attrs:{src:"https://qiniu.84dd.xyz/w07ta7.png",alt:""}})]),s._v(" "),t("ul",[t("li",[s._v("time:日志记录的时间")]),s._v(" "),t("li",[s._v("User@Host:执行的用户及主机")]),s._v(" "),t("li",[s._v("Query_time:执行的时间")]),s._v(" "),t("li",[s._v("Lock_time:锁表时间")]),s._v(" "),t("li",[s._v("Rows_sent:发送给请求方的记录数，结果数量")]),s._v(" "),t("li",[s._v("Rows_examined:语句扫描的记录条数")]),s._v(" "),t("li",[s._v("SET timestamp:语句执行的时间点")]),s._v(" "),t("li",[s._v("select....:执行的具体的SQL语句")])]),s._v(" "),t("p",[s._v("2）使用mysqldumpslow查看")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("perl mysqldumpslow.pl -t 5 -s at /data/mysql/OAK-slow.log\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"慢查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#慢查询优化"}},[s._v("#")]),s._v(" 慢查询优化")]),s._v(" "),t("p",[s._v("查询是否使用索引，只是表示一个SQL语句的执行过程;而是否为慢查询，是由它执行的时间决定 的，也就是说是否使用了索引和是否是慢查询两者之间没有必然的联系。我们在使用索引时，不要只关注是否起作用，应该关心索引是否减少了查询扫描的数据行数，如果扫描行数减少了，效率才会得到提升。对于一个大表，不止要创建索引，还要考虑索引过滤性，过滤性好，执行速度才会快。")]),s._v(" "),t("p",[t("strong",[s._v("慢查询原因总结")])]),s._v(" "),t("ul",[t("li",[s._v("全表扫描:explain分析type属性all")]),s._v(" "),t("li",[s._v("全索引扫描:explain分析type属性index")]),s._v(" "),t("li",[s._v("索引过滤性不好:靠索引字段选型、数据量和状态、表设计")]),s._v(" "),t("li",[s._v("频繁的回表查询开销:尽量少用select *，使用覆盖索引")])]),s._v(" "),t("h3",{attrs:{id:"分页查询优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分页查询优化"}},[s._v("#")]),s._v(" 分页查询优化")]),s._v(" "),t("p",[s._v("第一步:利用覆盖索引优化")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 改进为")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("第二步:利用子查询优化")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 改进为")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("原因:使用了id做主键比较(id>=)，并且子查询使用了覆盖索引进行优化。")]),s._v(" "),t("h2",{attrs:{id:"其他优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他优化"}},[s._v("#")]),s._v(" 其他优化")]),s._v(" "),t("h3",{attrs:{id:"查询缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询缓存"}},[s._v("#")]),s._v(" 查询缓存")]),s._v(" "),t("ul",[t("li",[s._v("缓存Select查询的结果和SQL语句")]),s._v(" "),t("li",[s._v("执行Select查询时，先查询缓存，判断是否存在可用的记录集，要求是否完全相同(包括参 数值)，这样才会匹配缓存数据命中。")]),s._v(" "),t("li",[s._v("即使开启查询缓存，以下SQL也不能缓存\n"),t("ul",[t("li",[s._v("查询语句使用SQL_NO_CACHE")]),s._v(" "),t("li",[s._v("查询的结果大于query_cache_limit设置")]),s._v(" "),t("li",[s._v("查询中有一些不确定的参数，比如now()")])])]),s._v(" "),t("li",[t("code",[s._v("show variables like '%query_cache%';")]),s._v(" 查看查询缓存是否启用，空间大小，限制等")]),s._v(" "),t("li",[t("code",[s._v("show status like 'Qcache%';")]),s._v(" 查看更详细的缓存参数，可用缓存空间，缓存块，缓存多少等")])]),s._v(" "),t("h3",{attrs:{id:"innodb-调整"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#innodb-调整"}},[s._v("#")]),s._v(" InnoDB 调整")]),s._v(" "),t("ul",[t("li",[s._v("将innodb_buffer_pool_size设置为总内存大小的60%-80%， innodb_buffer_pool_instances可以设置为多个，这样可以避免缓存争夺。")]),s._v(" "),t("li",[s._v("ChangeBuffer占用BufferPool空间，默认占25%，最大允许占50%，可以根据读写业务量来 进行调整。参数innodb_change_buffer_max_size;")]),s._v(" "),t("li",[s._v("将innodb_log_buffer_size参数调大，减少磁盘IO频率。")]),s._v(" "),t("li",[s._v("根据需要修改innodb_flush_log_at_trx_commit参数控制日志刷新行为。")])]),s._v(" "),t("p",[s._v("show proling")])],1)}),[],!1,null,null,null);a.default=_.exports}}]);