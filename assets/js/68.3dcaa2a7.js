(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{427:function(n,v,e){"use strict";e.r(v);var t=e(5),a=Object(t.a)({},(function(){var n=this,v=n.$createElement,e=n._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("面试总结")]),n._v(" "),e("h1",{attrs:{id:"美云一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#美云一"}},[n._v("#")]),n._v(" 美云一")]),n._v(" "),e("p",[n._v("什么是死锁\n两个及以上线程对统一资源进行争夺而导致的僵持局面，叫做死锁。")]),n._v(" "),e("p",[n._v("===========================================================\n怎么解决死锁\n1、可以按照顺序分配资源，避免多线程竞争同一个资源\n2、给锁加一个时间，可以使用tryLock，等待一段时间后就释放自己的锁。（synchronized会一直等待，不可以设置超时时间）")]),n._v(" "),e("p",[n._v("===========================================================\n多线程怎么保证安全\n需要保证线程的原子性，可见性和有序性\n1.原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）；\n即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行\n如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。\nvolatile无法保证全部操作都是原子性，比如自增，因为自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的。\n2.可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）；\nvolatile关键字，当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值，\n通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。\n3.有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。\n可以通过volatile关键字来保证一定的“有序性”。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。")]),n._v(" "),e("p",[n._v("===========================================================\n多线程是怎么实现的\n继承Thread类\n实现Runnable接口、\n实现Callable接口通过FutureTask包装器来创建Thread线程、\n使用ExecutorService、Callable、Future实现有返回结果的多线程。")]),n._v(" "),e("p",[n._v("工作中用到的设计模式有哪些场景\n怎么理解高内聚低耦合")]),n._v(" "),e("h1",{attrs:{id:"美云二"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#美云二"}},[n._v("#")]),n._v(" 美云二")]),n._v(" "),e("p",[n._v("什么是数据库行锁，表锁，实际代码中什么时候会出现\n通过select for update进行加行锁，\nset autocommit = 0;\nbegin;\nSELECT * FROM "),e("code",[n._v("user")]),n._v(" WHERE id = 1 FOR UPDATE;\n-- commit;\n在手动commit前，同样的条件SELECT * FROM "),e("code",[n._v("user")]),n._v(" WHERE id = 1 FOR UPDATE;会进行查询等待，知道上一个事务的commit。\n而不加FOR UPDATE是可以查询到数据的")]),n._v(" "),e("p",[n._v("同样，for update也可以表锁，比如SELECT * FROM "),e("code",[n._v("user")]),n._v(" FOR UPDATE;")]),n._v(" "),e("p",[n._v("结论：如果不根据主键查询，就会锁整张表")]),n._v(" "),e("p",[n._v("版本号乐观锁、select for update 悲观锁")]),n._v(" "),e("p",[n._v("===========================================================\n调用接口怎么保证数据一致，当时说的是标志位和mq实现\n调用第三方的查询接口，然后我们根据一定情况进行回滚")]),n._v(" "),e("p",[n._v("数据库分库分表\nmongodb用在什么场景\nelastic中的数据来源，用在什么场景")]),n._v(" "),e("p",[n._v("===========================================================\n如果很多接口都要判断一致性，或者说很多个方法都要同样判断一个事情，怎么做？应该要考虑设计模式\n统一出入口\n1、定义一个结果解析器，对获取到的结果进行统一的属性赋值")]),n._v(" "),e("p",[n._v("用到打印吗？\nes规则")]),n._v(" "),e("h1",{attrs:{id:"美的一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#美的一"}},[n._v("#")]),n._v(" 美的一")]),n._v(" "),e("p",[n._v("重载重写\n重写Override\n重载Overload：在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同")]),n._v(" "),e("p",[n._v("是否需要无参构造")]),n._v(" "),e("p",[n._v("===========================================================\n线程通讯\n方式一：使用 volatile 关键字\n方式二：使用Object类的wait() 和 notify() 方法，注意： wait和 notify必须配合synchronized使用，wait方法释放锁，notify方法不释放锁\n即利用Lock、Condition")]),n._v(" "),e("p",[n._v("锁机制，怎么加锁，怎么解锁\n如何快速实现对同一个资源的分配，因为加同步锁不合理，慢\nmysql联合索引情况\nes是否有索引")]),n._v(" "),e("p",[n._v("===========================================================\n怎么实现接口限流\n计数器、令牌桶、漏桶、滑动窗口法")]),n._v(" "),e("p",[n._v("mongodb主备问题")]),n._v(" "),e("p",[n._v("粤云二\n抽象类，接口，内部类的区别")]),n._v(" "),e("p",[n._v("===========================================================\n缓存和数据库的数据如何保证一致\n1、读的时候，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。\n2、canal监控mysql的变化\n3、避免脏读，可以删缓存，写数据库，再删缓存，然后交给读操作进行写缓存")]),n._v(" "),e("p",[n._v("常用设计模式")]),n._v(" "),e("p",[n._v("树童一\n面试题很多java类的基础\n反射及应用场景\nHashMap")]),n._v(" "),e("p",[n._v("===========================================================\n数据库中，char和varchar的区别\nchar类型的长度是固定的，varchar的长度是可变的。")]),n._v(" "),e("p",[n._v("卓信\n怎么加锁\n多线程情况下怎么使用HashMap")])])}),[],!1,null,null,null);v.default=a.exports}}]);